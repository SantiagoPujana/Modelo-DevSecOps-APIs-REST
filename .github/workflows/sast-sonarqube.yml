name: SAST (SonarCloud - Python)

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  sast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Download all commits

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('api-auth/requirements.txt', 'api-auth/test/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          if [ -f api-auth/test/requirements.txt ]; then pip install -r api-auth/test/requirements.txt; fi
          if [ -f api-auth/requirements.txt ]; then pip install -r api-auth/requirements.txt; fi

      - name: Run tests with coverage (pytest-cov)
        working-directory: api-auth
        run: |
          export PYTHONPATH=${PWD}
          pytest --maxfail=1 -q --cov=. --cov-report=xml:coverage.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: api-auth/coverage.xml

      # SonarCloud needs JDK to scan works
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Scan on SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
    outputs:
      job_status: ${{ job.status }}

  check-qg:
      needs: [sast]
      runs-on: ubuntu-latest
      steps:
        - name: Query SonarCloud Quality Gate (project)
          id: qg
          run: |
            STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" \
              | jq -r '.projectStatus.status')
            echo "status=${STATUS}" >> ${GITHUB_OUTPUT}
      outputs:
        qg_status: ${{ steps.qg.outputs.status }}

  compose-slack-alert-on-fail:
      needs: [sast, check-qg]
      if: ${{ needs.sast.outputs.job_status != 'success' || needs.check-qg.outputs.qg_status == 'ERROR' }}
      runs-on: ubuntu-latest
      steps:
        - name: Notify Slack (Quality Gate/Job failed)
          id: msg
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
            REPO: ${{ github.repository }}
            REF_NAME: ${{ github.ref_name }}
            ACTOR: ${{ github.actor }}
            EVENT_NAME: ${{ github.event_name }}
            RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            SONAR_PROJ: ${{ secrets.SONAR_PROJECT_KEY }}
            PR_URL: ${{ github.event_name == 'pull_request' && github.event.pull_request.html_url || '' }}
            PR_NUM: ${{ github.event_name == 'pull_request' && github.event.pull_request.number || '' }}
            PR_TITLE: ${{ github.event_name == 'pull_request' && github.event.pull_request.title || '' }}
          run: |
            if [ "$EVENT_NAME" = "pull_request" ] && [ -n "$PR_NUM" ]; then
              SONAR_PR_URL="https://sonarcloud.io/dashboard?id=${SONAR_PROJ}&pullRequest=${PR_NUM}"
              PR_BLOCK=$(cat <<EOF
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*Pull Request:* PR #${PR_NUM} - ${PR_TITLE}" }
                },
                {
                  "type": "actions",
                  "elements": [
                    { "type": "button", "text": { "type": "plain_text", "text": "Check PR" }, "url": "${PR_URL}" },
                    { "type": "button", "text": { "type": "plain_text", "text": "SonarCloud (PR)" }, "url": "${SONAR_PR_URL}" },
                    { "type": "button", "text": { "type": "plain_text", "text": "GitHub Actions" }, "url": "${RUN_URL}" }
                  ]
                }
            EOF
            )
                else
                  PR_BLOCK=$(cat <<EOF
                    {
                      "type": "context",
                      "elements": [{ "type": "mrkdwn", "text": "_Event: push (no PR)_" }]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        { "type": "button", "text": { "type": "plain_text", "text": "SonarCloud (Project)" }, "url": "https://sonarcloud.io/project/overview?id=${SONAR_PROJ}" },
                        { "type": "button", "text": { "type": "plain_text", "text": "GitHub Actions" }, "url": "${RUN_URL}" }
                      ]
                    }
            EOF
            )
                fi

                payload=$(cat <<EOF
                {
                  "attachments": [{
                    "color": "#D32F2F",
                    "blocks": [
                      { "type": "header", "text": { "type": "plain_text", "text": "ðŸš¨ SAST Analysis just Failed (Quality Gate/Job FAILED) ðŸš¨" } },
                      { "type": "section", "text": { "type": "mrkdwn", "text": "*Repo:* ${REPO}" } },
                      { "type": "section", "text": { "type": "mrkdwn", "text": "*Branch:* ${REF_NAME}\n*Actor:* ${ACTOR}\n*Event:* ${EVENT_NAME}" }},
                      ${PR_BLOCK}
                    ]
                  }]
                }
            EOF
            )
                
            payload="${payload//'%'/'%25'}"; payload="${payload//$'\n'/'%0A'}"; payload="${payload//$'\r'/'%0D'}"
            echo "payload=$payload" >> $GITHUB_OUTPUT
      outputs:
        slack_payload: ${{ steps.msg.outputs.payload }}

  alerts:
    needs: [compose-slack-alert-on-fail]
    uses: ./.github/workflows/alerts-send.yml
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      MAIL_TO: ${{ secrets.MAIL_TO }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    with:
      status: ${{ needs.sast.job_status }}
      only_if_failed: true
      send_slack: true
      slack_payload: ${{ needs.compose-slack-alert-on-fail.outputs.slack_payload }}
      send_email: true
      email_subject: "[ALERT] SAST FAILED - ${{ github.repository }}"
      email_body: |
        <h2>ðŸš¨ SAST Analysis just FAILED (Quality Gate/Job) ðŸš¨</h2>
            
            <table border="0" cellpadding="5">
              <tr><td><b>Repo:</b></td><td>${{ github.repository }}</td></tr>
              <tr><td><b>Branch:</b></td><td>${{ github.ref_name }}</td></tr>
              <tr><td><b>Actor:</b></td><td>${{ github.actor }}</td></tr>
              <tr><td><b>Event:</b></td><td>${{ github.event_name }}</td></tr>
            </table>

            <p><b>Run:</b> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Open execution in GitHub Actions</a></p>

            <p><b>Pull Request:</b> 
              <a href="${{ github.event.pull_request.html_url }}">
                PR #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
              </a>
            </p>

            <p><b>SonarCloud Project:</b> 
              <a href="https://sonarcloud.io/project/overview?id=${SONAR_PROJECT_KEY}}">Overview</a>
            </p>

            <p><b>SonarCloud (PR):</b> 
              <a href="https://sonarcloud.io/dashboard?id=${SONAR_PROJECT_KEY}&pullRequest=${{ github.event.pull_request.number }}">
                Check PR on SonarCloud
              </a>
            </p>

            <p>ðŸ‘‰ Please Check Issues/Vulnerabilities/Hotspots on SonarCloud.</p>
