name: SAST (SonarCloud - Python)

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  sast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Download all commits

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('api-auth/requirements.txt', 'api-auth/test/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          if [ -f api-auth/test/requirements.txt ]; then pip install -r api-auth/test/requirements.txt; fi
          if [ -f api-auth/requirements.txt ]; then pip install -r api-auth/requirements.txt; fi

      - name: Run tests with coverage (pytest-cov)
        working-directory: api-auth
        run: |
          export PYTHONPATH=${PWD}
          pytest --maxfail=1 -q --cov=. --cov-report=xml:coverage.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: api-auth/coverage.xml

      # SonarCloud needs JDK to scan works
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Scan on SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      
      - name: SonarCloud Quality Gate
        id: qg
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
        #with:
        #  scanMetadataReportFile: .scannerwork/report-task.txt # (default)      

      - name: Capture QG status to step output
        id: capture_qg
        run: |
          QG="${{ steps.qg.outputs.quality-gate-status }}"
          if [ -z "$QG" ]; then QG="UNKNOWN"; fi
          echo "qg_status=$QG" >> "$GITHUB_OUTPUT"

    outputs:
      job_status: ${{ job.status }}
      qg_status: ${{ steps.capture_qg.outputs.qg_status }} # 'PASSED' | 'FAILED' | 'UNKNOWN'

  debug-status:
    needs: [sast]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Echo needs.* values
        run: |
          echo "needs.sast.result            = ${{ needs.sast.result }}"
          echo "needs.sast.outputs.job_status= ${{ needs.sast.outputs.job_status }}"
          echo "needs.sast.outputs.qg_status = ${{ needs.sast.outputs.qg_status }}"

  decide-alert:
    needs: [sast]
    runs-on: ubuntu-latest
    steps:
      - id: out
        run: |
          FAIL=$([ "${{ needs.sast.outputs.job_status }}" != "success" ] || [ "${{ needs.sast.outputs.qg_status }}" = "FAILED" ] && echo "true" || echo "false")
          echo "should_alert=$FAIL" >> "$GITHUB_OUTPUT"
    outputs:
      should_alert: ${{ steps.out.outputs.should_alert }}

  compose-slack-alert-on-fail:
    needs: [decide-alert]
    if: ${{ needs.decide-alert.outputs.should_alert == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack (Quality Gate/Job failed)
        id: msg
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPO: ${{ github.repository }}
          REF_NAME: ${{ github.ref_name }}
          ACTOR: ${{ github.actor }}
          EVENT_NAME: ${{ github.event_name }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          SONAR_PROJ: ${{ secrets.SONAR_PROJECT_KEY }}
          PR_URL: ${{ github.event_name == 'pull_request' && github.event.pull_request.html_url || '' }}
          PR_NUM: ${{ github.event_name == 'pull_request' && github.event.pull_request.number || '' }}
          PR_TITLE: ${{ github.event_name == 'pull_request' && github.event.pull_request.title || '' }}
        run: |
          payload=$(jq -c -n \
            --arg repo "$REPO" \
            --arg ref "$REF_NAME" \
            --arg actor "$ACTOR" \
            --arg event "$EVENT_NAME" \
            --arg run "$RUN_URL" \
            --arg sonar "$SONAR_PROJ" \
            --arg prurl "$PR_URL" \
            --arg prnum "$PR_NUM" \
            --arg prtitle "$PR_TITLE" \
            '{
              attachments: [{
                color: "#D32F2F",
                blocks:
                  ([
                    {type:"header", text:{type:"plain_text", text:"ðŸš¨ SAST Analysis just FAILED (Quality Gate/Job) ðŸš¨"}},
                    {type:"section", text:{type:"mrkdwn", text:"*Repo:* \($repo)"}},
                    {type:"context", elements:[
                      {type:"mrkdwn", text:"*Branch:* \($ref)"},
                      {type:"mrkdwn", text:"*Actor:* \($actor)"},
                      {type:"mrkdwn", text:"*Event:* \($event)"}]},
                    {type:"section", text:{type:"mrkdwn",
                      text:"*Run:* <\($run)|Open in GitHub Actions>\n*SonarCloud (Project):* <https://sonarcloud.io/project/overview?id=\($sonar)|Open>" }}
                  ] +
                  ( if ($prnum|length) > 0 then
                      [
                        {type:"divider"},
                        {type:"section", text:{type:"mrkdwn", text:"*Pull Request:* <\($prurl)|PR #\($prnum) - \($prtitle)>"}},
                        {type:"actions", elements:[
                          {type:"button", text:{type:"plain_text", text:"Check PR"}, url:$prurl},
                          {type:"button", text:{type:"plain_text", text:"SonarCloud (PR)"}, url:("https://sonarcloud.io/project/analysis?id=" + $sonar + "&pullRequest=" + $prnum)},
                          {type:"button", text:{type:"plain_text", text:"GitHub Actions"}, url:$run}
                        ]}
                      ]
                    else [] end )
                  )
              }]
            }')

          echo 'slack_payload=$(echo $payload | jq \'. | tostring\')' >> "$GITHUB_OUTPUT"

          cat "$GITHUB_OUTPUT"

          payload='{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]},{"attachments":[{"color":"#D32F2F","blocks":[{"type":"header","text":{"type":"plain_text","text":"ðŸš¨ SAST/QG FAILED"}},{"type":"section","text":{"type":"mrkdwn","text":"*Repo:* '${{ github.repository }}'"}}]}]}'
          echo "slack_payload=$payload" >> $GITHUB_OUTPUT
          cat "$GITHUB_OUTPUT"
    outputs:
      slack_payload: ${{ steps.msg.outputs.slack_payload }}

  compose-email-alert-on-fail:
    needs: [decide-alert]
    if: ${{ needs.decide-alert.outputs.should_alert == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Build email HTML
        id: build
        env:
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          ACTOR: ${{ github.actor }}
          EVENT_NAME: ${{ github.event_name }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          PR_URL: ${{ github.event_name == 'pull_request' && github.event.pull_request.html_url || '' }}
          PR_NUM: ${{ github.event_name == 'pull_request' && github.event.pull_request.number || '' }}
          PR_TITLE: ${{ github.event_name == 'pull_request' && github.event.pull_request.title || '' }}
        run: |
          if [ "$EVENT_NAME" = "pull_request" ] && [ -n "$PR_NUM" ]; then
            PR_BLOCK="<p><b>Pull Request:</b> <a href=\"$PR_URL\">PR #$PR_NUM - $PR_TITLE</a></p>
            <p><b>SonarCloud (PR):</b> <a href=\"https://sonarcloud.io/project/analysis?id=$SONAR_PROJECT_KEY&pullRequest=$PR_NUM\">Open PR Analysis</a></p>"
          else
            PR_BLOCK=""
          fi

          body=$(cat <<EOF
            <h2>ðŸš¨ SAST Analysis just FAILED (Quality Gate/Job) ðŸš¨</h2>
            
            <table border="0" cellpadding="5">
              <tr><td><b>Repo:</b></td><td>${{ github.repository }}</td></tr>
              <tr><td><b>Branch:</b></td><td>${{ github.ref_name }}</td></tr>
              <tr><td><b>Actor:</b></td><td>${{ github.actor }}</td></tr>
              <tr><td><b>Event:</b></td><td>${{ github.event_name }}</td></tr>
            </table>

            <p><b>Run:</b> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Open execution in GitHub Actions</a></p>

            <p><b>Pull Request:</b> 
              <a href="${{ github.event.pull_request.html_url }}">
                PR #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
              </a>
            </p>

            <p><b>SonarCloud Project:</b> 
              <a href="https://sonarcloud.io/project/overview?id=$SONAR_PROJECT_KEY">Overview</a>
            </p>

            <p><b>SonarCloud (PR):</b> 
              <a href="https://sonarcloud.io/dashboard?id=$SONAR_PROJECT_KEY&pullRequest=${{ github.event.pull_request.number }}">
                Check PR on SonarCloud
              </a>
            </p>

            <p>ðŸ‘‰ Please Check Issues/Vulnerabilities/Hotspots on SonarCloud.</p>
          EOF
          )

          echo "email_body=$body" >> "$GITHUB_OUTPUT"
    outputs:
      email_body: ${{ steps.build.outputs.email_body }}

  debug-payloads:
    needs: [decide-alert, compose-slack-alert-on-fail, compose-email-alert-on-fail]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Echo needs.* values
        run: |
          echo "should_alert         = ${{ needs.decide-alert.outputs.should_alert }}"
          echo "slack_payload        = $(echo -n '${{ needs.compose-slack-alert-on-fail.outputs.slack_payload }}')"
          echo "slack_payload_len    = $(echo -n '${{ needs.compose-slack-alert-on-fail.outputs.slack_payload }}' | wc -c)"
          echo "email_body           = $(echo -n '${{ needs.compose-email-alert-on-fail.outputs.email_body }}')"
          echo "email_body_len       = $(echo -n '${{ needs.compose-email-alert-on-fail.outputs.email_body }}' | wc -c)"

  alerts:
    needs: [sast, compose-slack-alert-on-fail, compose-email-alert-on-fail]
    uses: ./.github/workflows/alerts-send.yml
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      MAIL_TO: ${{ secrets.MAIL_TO }}
    with:
      status: ${{ (needs.sast.outputs.job_status != 'success' || needs.sast.outputs.qg_status == 'FAILED') && 'failure' || 'success' }}
      only_if_failed: true

      # Slack Alert
      send_slack: true
      slack_payload: ${{ needs.compose-slack-alert-on-fail.outputs.slack_payload }}

      # Email Alert
      send_email: true
      email_subject: "[ALERT] SAST Analysis just Failed (Quality Gate/Job FAILED) - ${{ github.repository }}"
      email_body: ${{ needs.compose-email-alert-on-fail.outputs.email_body }}
